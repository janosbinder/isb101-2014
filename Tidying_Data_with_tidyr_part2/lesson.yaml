- Class: meta
  Course: isb101
  Lesson: Tidying Data with tidyr part2
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.15

- Class: text
  Output: In this lesson, you'll continue to learn how to tidy your data with the tidyr package.

- Class: text
  Output: Parts of this lesson will require the use of dplyr. If you don't have a basic knowledge of dplyr, you should exit this lesson and begin with the dplyr lessons.

- Class: cmd_question
  Output: readr is required for certain data manipulations, such as `parse_number(), which will be used in the next question.  Let's, (re)load the package with library(readr).
  CorrectAnswer: library(readr)
  AnswerTests: omnitest('library(readr)')
  Hint: Type library(readr) to (re)load the readr package.

- Class: text 
  Output: We will continue to work on students3. Remember, you already used gather and spread to obtain a table where the 5 different classes were in a column called class.

- Class: cmd_question
  Output: Lastly, we want the values in the class column to simply be 1, 2, ..., 5 and not class1, class2, ..., class5. We can use the parse_number() function from readr to accomplish this. To see how it works, try parse_number("class5").
  CorrectAnswer: parse_number("class5")
  AnswerTests: omnitest('parse_number("class5")')
  Hint: Type parse_number("class5") to see how it works.

- Class: script
  Output: Now, the final step. Edit the R script, then save it and type submit() when you are ready. Type reset() to reset the script to its original state.
  AnswerTests: script_vals_identical()
  Hint: Read the directions in the script carefully. If R is giving you an error, try to understand what it is telling you. Save the script and type submit() at the prompt when you are ready, or type reset() to reset the script to its original state.
  Script: script4.R

- Class: cmd_question
  Output: The fourth messy data problem we'll look at occurs when multiple observational units are stored in the same table. students4 presents an example of this. Take a look at the data now.
  CorrectAnswer: students4
  AnswerTests: prints_var('students4')
  Hint: Type students4 to view its contents.

- Class: text
  Output: students4 is almost the same as our tidy version of students3. The only difference is that students4 provides a unique id for each student, as well as his or her sex (M = male; F = female).

- Class: text
  Output: At first glance, there doesn't seem to be much of a problem with students4. All columns are variables and all rows are observations. However, notice that each id, name, and sex is repeated twice, which seems quite redundant. This is a hint that our data contains multiple observational units in a single table.

- Class: script
  Output: "Our solution will be to break students4 into two separate tables -- one containing basic student information (id, name, and sex) and the other containing grades (id, class, midterm, final).\n\nEdit the R script, save it, then type submit() when you are ready. Type reset() to reset the script to its original state."
  AnswerTests: script_vals_identical()
  Hint: Read the directions in the script carefully. If R is giving you an error, try to understand what it is telling you. Save the script and type submit() at the prompt when you are ready, or type reset() to reset the script to its original state.
  Script: script5.R

- Class: script
  Output: Notice anything strange about student_info? It contains five duplicate rows! See the script for directions on how to fix this. Save the script and type submit() when you are ready, or type reset() to reset the script to its original state.
  AnswerTests: script_vals_identical()
  Hint: Read the directions in the script carefully. If R is giving you an error, try to understand what it is telling you. Save the script and type submit() at the prompt when you are ready, or type reset() to reset the script to its original state.
  Script: script6.R

- Class: script
  Output: "Now, using the script I just opened for you, create a second table called gradebook using the id, class, midterm, and final columns (in that order).\n\nEdit the R script, save it, then type submit() when you are ready. Type reset() to reset the script to its original state."
  AnswerTests: script_vals_identical()
  Hint: Read the directions in the script carefully. If R is giving you an error, try to understand what it is telling you. Save the script and type submit() at the prompt when you are ready, or type reset() to reset the script to its original state.
  Script: script7.R

- Class: text
  Output: It's important to note that we left the id column in both tables. In the world of relational databases, 'id' is called our 'primary key' since it allows us to connect each student listed in student_info with their grades listed in gradebook. Without a unique identifier, we might not know how the tables are related. (In this case, we could have also used the name variable, since each student happens to have a unique name.)

- Class: text
  Output: The fifth and final messy data scenario that we'll address is when a single observational unit is stored in multiple tables. It's the opposite of the fourth problem.

- Class: cmd_question
  Output: To illustrate this, we've created two datasets, passed and failed. Take a look at passed now.
  CorrectAnswer: passed
  AnswerTests: prints_var('passed')
  Hint: Type passed to view its contents.

- Class: cmd_question
  Output: Now view the contents of failed.
  CorrectAnswer: failed
  AnswerTests: prints_var('failed')
  Hint: Type failed to view its contents.

- Class: text
  Output: Teachers decided to only take into consideration final exam grades in determining whether students passed or failed each class. As you may have inferred from the data, students passed a class if they received a final exam grade of A or B and failed otherwise.

- Class: text
  Output: The name of each dataset actually represents the value of a new variable that we will call 'status'. Before joining the two tables together, we'll add a new column to each containing this information so that it's not lost when we put everything together.

- Class: cmd_question
  Output: Use dplyr's mutate() to add a new column to the passed table. The column should be called status and the value, "passed" (a character string), should be the same for all students. 'Overwrite' the current version of passed with the new one.
  CorrectAnswer: passed <- passed %>% mutate(status = "passed")
  AnswerTests: any_of_exprs('passed <- passed %>% mutate(status = "passed")', 'passed <- mutate(passed, status = "passed")')
  Hint: passed <- passed %>% mutate(status = "passed") will do the trick.

- Class: cmd_question
  Output: Now, do the same for the failed table, except the status column should have the value "failed" for all students.
  CorrectAnswer: failed <- failed %>% mutate(status = "failed")
  AnswerTests: any_of_exprs('failed <- failed %>% mutate(status = "failed")', 'failed <- mutate(failed, status = "failed")')
  Hint: failed <- failed %>% mutate(status = "failed") is what you're looking for.

- Class: cmd_question
  Output: "Now, pass as arguments the passed and failed tables (in order) to the dplyr function bind_rows(), which will join them together into a single unit. Check ?bind_rows if you need help.\n\nNote: bind_rows() is only available in dplyr 0.4.0 or later. If you have an older version of dplyr, please quit the lesson, update dplyr, then restart the lesson where you left off. If you're not sure what version of dplyr you have, type packageVersion('dplyr')."
  CorrectAnswer: bind_rows(passed, failed)
  AnswerTests: match_call('bind_rows(passed, failed)')
  Hint: Call bind_rows() with two arguments, passed and failed (in that order), to join the two tables.

- Class: text
  Output: Of course, we could arrange the rows however we wish at this point, but the important thing is that each row is an observation, each column is a variable, and the table contains a single observational unit. Thus, the data are tidy.

- Class: text
  Output: We've covered a lot in this lesson. Let's bring everything together and tidy a real dataset.

- Class: text
  Output: "The SAT is a popular college-readiness exam in the United States that consists of three sections: critical reading, mathematics, and writing. Students can earn up to 800 points on each section. This dataset presents the total number of students, for each combination of exam section and sex, within each of six score ranges. It comes from the 'Total Group Report 2013', which can be found here:\n\nhttp://research.collegeboard.org/programs/sat/data/cb-seniors-2013"

- Class: cmd_question
  Output: I've created a variable called 'sat' in your workspace, which contains data on all college-bound seniors who took the SAT exam in 2013. Print the dataset now.
  CorrectAnswer: sat
  AnswerTests: prints_var('sat')
  Hint: Type sat to view its contents.

- Class: script
  Output: As we've done before, we'll build up a series of chained commands, using functions from both tidyr and dplyr. Edit the R script, save it, then type submit() when you are ready. Type reset() to reset the script to its original state.
  AnswerTests: script_vals_identical()
  Hint: Read the directions in the script carefully. If R is giving you an error, try to understand what it is telling you. Save the script and type submit() at the prompt when you are ready, or type reset() to reset the script to its original state.
  Script: script8.R

- Class: script
  Output: Finish off the job by following the directions in the script. Save the script and type submit() when you are ready, or type reset() to reset the script to its original state.
  AnswerTests: script_vals_identical()
  Hint: Read the directions in the script carefully. If R is giving you an error, try to understand what it is telling you. Save the script and type submit() at the prompt when you are ready, or type reset() to reset the script to its original state.
  Script: script9.R

- Class: text
  Output: In this lesson, you learned how to tidy data with tidyr and dplyr. These tools will help you spend less time and energy getting your data ready to analyze and more time actually analyzing it.
