<style>
.reveal code .r{
    width:120%
    font:0.8em}
.section .reveal .state-background {
    background: white;}
.section .reveal h1,
.section .reveal p {
    color: black;
    position: relative;
    top: 4%;}
.reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
}
.small-code pre code {
  font-size: 1em;
}
</style>

Advanced introduction to R
========================================================
author: Ganna Androsova
date: 2015-01-06
font-family: 'Arial'

Data import
========================================================
class:small-code
You can directly read your data table from a file located either on your computer: 

```{r}
taxon = read.table('taxon.txt')
```

or elsewhere in the web: 
```{r}
# url of taxon data
taxon_url = "http://www.bio.ic.ac.uk/research/mjcraw/therbook/data/taxon.txt"

# import data in R
taxon = read.table(taxon_url)

head(taxon)
```

Data import
========================================================
It’s important to remember of possibility to extend the power of the functions used - by playing with their arguments: 

**myDF = read.table(‘fileName.txt’, header = T, as.is = T)**

Data comes in different formats: txt, csv, xls, tab...
Not all data types are supported in R. 

To extend R capabilities install a required **package**.

                        TASK

We would like to work with excel file: import its content into R, analyse it, visualize results and write the file with results. 

Installation of R packages
========================================================

- List of the existing R packages is available at **Packages** tab at https://cran.r-project.org

To add packages type in console:
- install.packages("**PackageName**")

OR
- source("https://bioconductor.org/biocLite.R")
biocLite("**PackageName**")
- you may also download any package as a .zip and install it then by choosing in the R menu: **Packages** -> **Install package(s) from local .zip file** -> choosing the name of the file

Installation of R packages
========================================================
class:small-code
For working with excel file, we need package **"xlsReadWrite"**.

```{r, eval = F}
source("https://bioconductor.org/biocLite.R")
biocLite("xlsx")
```
After you run these lines -> package is installed but not started.
```{r}
library(xlsx)
taxon = read.xlsx("taxon.xlsx", sheetIndex = 1)
head(taxon[, 1:6])
```

Control statements: conditions
========================================================
To check whether your data satisfy some particular condition, R has a structure:
**if (expression1) {  expression2 } else { expression3 }**

Here **expression1** must include logical operators and be evaluated to a single logical value (**TRUE** or **FALSE**).

If TRUE, then the **expression2** is executed.

If FALSE, then expression3 is executed. Th** expression**3 may be either a single command, or a sequence of commands, or again a control statement, like **if ... else** operator or a **loop**.


Writing the results
========================================================
class:small-code
```{r}
#Normalize the values in data frame
class(taxon)
```

Frequency distribution
========================================================
In statistics, a **frequency distribution** is a table that displays the frequency of various outcomes in a sample. Each entry in the table contains the frequency or count of the occurrences of values within a particular group or interval, and in this way, the table summarizes the distribution of values in the sample.

Let’s take an example of “**discoveries**” data set (type ?discoveries in your R console).

These are the **raw data** on the number of important inventions or discoveries made yearly from 1860 to 1959.

Frequency distribution
========================================================
class:small-code
Extract data on years 1869 to 1878:
```{r}
discoveries.per.year = discoveries[10:19]
discoveries.per.year
```
During the mentioned 10 years there were 26 important discoveries; that having 5 discoveries per year happened only once and that one, two or three discoveries per year are much more frequent (3 times each).

Frequency distribution
========================================================
class:small-code
In R you can create the frequency distribution table using just one command: **table( )**.

This creates so-called **contingency table** which is the analog of the frequency distribution table:
```{r}
table(discoveries.per.year)
```

Data visualization
========================================================
A plot is a visualization (graphical representation) of data, in which the data are coded by **symbols**, such as **dots**, **bars** in a bar chart, **lines** in a line chart, or **slices** in a pie chart.
![](5.png)

R has strong graphic capabilities!

How to create a graph in R?
========================================================
class:small-code
The basic function for plotting in R is **plot( )**. It opens a graph window and plots a graph there. Its results can be varied by changing the parameters (arguments) of the **plot( )** function:
```{r, fig.align = "center", fig.height = 5}
years = c(1:10)
discoveries_df = data.frame(years, discoveries.per.year)
plot(discoveries_df)
```

How to create a graph in R?
========================================================
class:small-code

```{r, fig.align = "center", fig.height = 7, fig.width = 12}
par(mfrow=c(1,2))
plot(discoveries_df)
hist(discoveries.per.year, breaks = 10)
```

How to create a graph in R?
========================================================
Let's improve the figure! (Check ?plot and ?hist)

Use the **pch=** option to specify symbols to use when plotting points. For symbols 21 through 25, specify border color (**col=**) and fill color (**bg=**).

![](6.png)

How to create a graph in R?
========================================================
class:small-code
```{r, fig.align = "center", fig.height = 7, fig.width = 12}
par(mfrow=c(1,2))
plot(discoveries_df, col = "blue", pch = 19, main = "Discoveries per year", xlab = "Years", ylab = "Number of discoveries")
hist(discoveries.per.year, breaks = 10, col = "green", main = "Frequency distribution of discoveries", xlab = "Discoveries per year")
```

Plotting in R
========================================================
![](7.png)

Dot plots
========================================================
class:small-code
- **Dot plots** are created with function **dotchart(x, labels=)**, where x is a numeric vector and labels is a vector of labels for each point.
- You can add a **groups=** option to designate a factor specifying how the elements of x are grouped.
- Option **gcolor=** controls the color of the groups label.

```{r, fig.align = "center", fig.height = 7, fig.width = 12}
par(mfrow=c(1,2))
# Simple Dotplot
dotchart(mtcars$mpg,labels=row.names(mtcars),cex=.7,main="Gas Milage for Car Models",xlab="Miles Per Gallon")

# Dotplot: Grouped Sorted and Colored
x <- mtcars[order(mtcars$mpg),] # sort by mpg
x$cyl <- factor(x$cyl) # it must be a factor
x$color[x$cyl==4] <- "red"
x$color[x$cyl==6] <- "blue"
x$color[x$cyl==8] <- "darkgreen"  
dotchart(x$mpg,labels=row.names(x),cex=.7,groups= x$cyl,main="Gas Milage for Car Models\ngrouped by cylinder",xlab="Miles Per Gallon", gcolor="black", color=x$color)
```

Dot plots
========================================================
class:small-code
```{r, fig.align = "center", fig.height = 6, fig.width = 12}
par(mfrow=c(1,2))
# Simple Dotplot
dotchart(mtcars$mpg,labels=row.names(mtcars),cex=.7,main="Gas Milage for Car Models",xlab="Miles Per Gallon")

# Dotplot: Grouped Sorted and Colored 
dotchart(x$mpg,labels=row.names(x),cex=.7,groups= x$cyl,main="Gas Milage for Car Models\ngrouped by cylinder",xlab="Miles Per Gallon", gcolor="black", color=x$color)
```

Bar charts
========================================================
Create bar plots with the **barplot(x)**, where x is a vector or matrix. If **x is a vector**, the values determine the heights of the bars in the plot.

Use the option **horiz = T** to create a horizontal bar plot.

If **x is a matrix** and the option **beside = FALSE** used, then each bar of the plot corresponds to a column of x, with the values in the column giving the heights of stacked “sub-bars”.

If** x is a matrix** and **beside = TRUE**, then the values in each column are juxtaposed rather than stacked.

Include option **names.arg = (character vector)** to label the bars.

Bar charts
========================================================
class:small-code
```{r, fig.align = "center", fig.height = 6, fig.width = 12, eval=FALSE}
par(mfrow=c(2,2))
# Simple Bar Plot 
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", xlab="Number of Gears")

# Simple Horizontal Bar Plot with Added Labels 
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", horiz=TRUE,names.arg=c("3 Gears", "4 Gears", "5 Gears"))

# Stacked Bar Plot with Colors and Legend
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",xlab="Number of Gears", col=c("darkblue","red"),legend = rownames(counts))

# Grouped Bar Plot
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",xlab="Number of Gears", col=c("darkblue","red"),legend = rownames(counts), beside=TRUE)
```

Bar charts
========================================================
class:small-code
```{r, fig.align = "center", fig.height = 9, fig.width = 12, echo=FALSE}
par(mfrow=c(2,2))
# Simple Bar Plot 
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", xlab="Number of Gears")

# Simple Horizontal Bar Plot with Added Labels 
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", horiz=TRUE,names.arg=c("3 Gears", "4 Gears", "5 Gears"))

# Stacked Bar Plot with Colors and Legend
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",xlab="Number of Gears", col=c("darkblue","red"),legend = rownames(counts))

# Grouped Bar Plot
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",xlab="Number of Gears", col=c("darkblue","red"),legend = rownames(counts), beside=TRUE)
```

Line charts
========================================================
Line charts are created with the function **lines(x, y, type=)**,
where **x** and **y** are numeric vectors of (x,y) points to connect. 

**type=** indicates types of symbols to be used in the plot.

The **lines()** function adds information to an existing graph.

It **can not produce a graph** on its own. Usually **it follows a plot(x, y)** command that produces a graph.

Line charts
========================================================
class:small-code
```{r, fig.align = "center", fig.height = 9, fig.width = 12, eval=FALSE}
x <- c(1:5) #create some data
y <- x 

par(pch=22, col="blue") # plotting symbol and color 
par(mfrow=c(2,4)) # all plots on one page 
opts = c("p","l","o","b","c","s","S","h") 

for(i in 1:length(opts)){ 
  heading = paste("type=",opts[i]) 
  plot(x, y, main=heading) 
  lines(x, y, type=opts[i]) 
}
```

Line charts
========================================================
class:small-code
```{r, fig.align = "center", fig.height = 9, fig.width = 14, echo=FALSE}
x <- c(1:5) #create some data
y <- x 
par(pch=22, col="blue") # plotting symbol and color 
par(mfrow=c(2,4)) # all plots on one page 
opts = c("p","l","o","b","c","s","S","h") 
for(i in 1:length(opts)){ 
  heading = paste("type=",opts[i]) 
  plot(x, y, main=heading) 
  lines(x, y, type=opts[i]) 
}
```

Boxplots
========================================================
Boxplots can be created for individual variables or for variables by group with **boxplot(x, data=)**, where **x** is a formula and **data=** is data frame with your data. An example of a formula is **y~group** where a separate box plot for numeric variable y is generated for each value of group. 

**varwidth = T** makes box plot widths proportional to the
square root of the samples sizes; 

**horizontal = T** reverses the axis orientation.

Boxplots
========================================================
class:small-code
```{r, fig.align = "center", fig.height = 7, fig.width = 7}
# Boxplot of MPG by Car Cylinders 
boxplot(wt~cyl, data=mtcars, main=toupper("Vehicle Weight"), font.main=3, cex.main=1.2, xlab="Number of Cylinders", ylab="Weight", font.lab=3, col="green")
```

Population vs. sample
========================================================
![](9.png)

Measures of central tendency
========================================================
![](10.png)

Quantile, quartile, percentile
========================================================
In R, a very useful function for calculating statistics for your data is **sapply( )**. Possible functions used in **sapply()** include: **mean**, **sd**, **var**, **min**, **max**, **range**, **fivenum** and **quantile**. 

If the members of the total set are **sorted by increasing order**, the set can be divided progressively, beginning at the smallest and ending at the largest, into subsets of equal or nearly equal counts of members, called **quantiles**. 

If the division is into **four** bands or groups, the quantile is a **quartile**, if into **ten** it is a **decile**, if into **100** it is a **percentile**.

The demarcation between the second and third quartile and the 50th and 51st percentiles, is the **median**.

Quantile, quartile, percentile
========================================================
Box plot is a nice way to represent **five-number statistics** of your data set. 

Q1 = The lower quartile = The 0.25 quantile = The 25% percentile

Q2 = The median = The 0.50 quantile = The 50% percentile

Q3 = The upper quartile = The 0.75 quantile = The 75% percentile

![](11.png)

Quantile, quartile, percentile
========================================================
class:small-code
```{r, fig.align = "center", fig.height = 7, fig.width = 7}
boxplot(x, range = 0, col = "red", main = "Basic boxplot")
text(1.3, quantile(x), c("Minimum","Q1","Median","Q3","Maximum"), col="blue")
```

Measures of variability
========================================================
![](12.png)

Variance vs. standard deviation 
========================================================
![](13.png)

By using the SD we have a "standard" way of knowing what is normal, and what is extra large or extra small.  Here, rottweillers are tall dogs,  and dachsunds are a bit short ... but don't tell them! 

