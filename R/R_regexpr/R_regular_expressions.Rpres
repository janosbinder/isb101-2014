<style>
.reveal column, .reveal column1, .reveal column2 slideContent{
    margin:-20px;
    }
.reveal code .r{
    width:120%
    font:0.8em}
.section .reveal .state-background {
    background: white;}
.section .reveal h1,
.section .reveal p {
    color: black;
    position: relative;
    top: 4%;}
.reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
}
.small-code pre code {
  font-size: 1em;
}
.midcenter {
    position: fixed;
    top: 50%;
    left: 50%;
}
</style>

Regular Expressions in R
========================================================
author: Ganna Androsova
date: 07-01-2016
font-family: 'Arial'


What is a regular expression?
========================================================
![](1.png)

What is a regular expression?
========================================================
![](2.png)

What is a regular expression?
========================================================
![](3.png)

What is a regular expression?
========================================================
![](4.png)

Motivation
========================================================
What if we want to match 
- any letter followed by ’n’?
- any vowel followed by ’n’?
- two letters followed by ’n’?
- any number of letters followed by ’n’? 

Regular expressions!
- allow us to match much more complicated patterns 
- build patterns from a simple vocabulary and grammar 

R supports two flavors of regular expressions, we will always use perl(set option **perl = TRUE**)

Search for
========================================================
<div style="text-align:center;color:red">red</div>

bar**red**

**red**is

ti**red**

caught **red** handed

**red**, purple, and blue shirt

Match a word boundary
========================================================
To match word boundary place \\b at the start and the end of the word.

<div style="text-align:center;color:red">\\bred\\b</div>

barred

redis

tired

caught **red** handed

**red**, purple, and blue shirt

Match the beginning of the line
========================================================
<div style="text-align:center;color:red">^red\\b</div>

barred

redis

tired

caught red handed

**red**, purple, and blue shirt

R functions
========================================================
**grep, grepl**: Search for matches of a regular expression/pattern in a character vector; either return the indices into the character vector that match, the strings that happen to match, or a TRUE/FALSE vector indicating which elements match

**regexpr, gregexpr**: Search a character vector for regular expression matches and return the indices of the string where the match begins and the length of the match

**sub, gsub**: Search a character vector for regular expression matches and replace that match with another string

Meta characters
========================================================
class:small-code
**.** (period) represents any character except empty string ””

```{r}
vec <- c('ct', 'cat', 'cart', 'dog', 'rat', 'carert', 'bet')
grep(".at", vec, perl=TRUE)
grep("..t", vec, perl=TRUE)
```
**+** represents one or more occurrences

```{r}
grep('c.+t', vec, perl = TRUE)
```

Meta characters
========================================================
class:small-code
\* represents zero or more occurrences

```{r}
vec 
grep('c.*t', vec, perl = TRUE)
```
Group terms with parentheses ’(’ and ’)’

```{r}
grep('c(.r)+t', vec, perl = TRUE)
grep('c(.r)*t', vec, perl = TRUE)
```

Meta characters
========================================================
class:small-code
‘.’ ‘,’ ‘+’ ‘*’ are all metacharacters

Other useful ones include:

ˆ and $ (start and end of line)
```{r}
vec
grep('r.$', vec, perl = TRUE)
```

Meta characters
========================================================
class:small-code
| ( logical OR )
```{r}
vec
grep('(c.t)|(c.rt)', vec, perl = TRUE)
```

Character classes
========================================================
**[a-z]** lowercase letters

**[a-zA-Z]** any letter

**[0-9]** any number'

**[aeiou]** any vowel

**[0-7ivx]** any of 0 to 7, i, v, and x

Inside a character class **ˆ** means anything except the following characters. E.g.

**[ˆ0-9]** anything except a digit

Matching metacharacters
========================================================
class:small-code
We saw a bunch of special characters . + * ] [ $ What if we want to match them?
```{r}
vec2 = c("ct", "cat", "caat", "caart", "caaat", "caaraat", "c.t")
grep('c.t', vec2, perl = TRUE)
```
Escape them with \

```{r}
#grep('c\.t', vec, perl = TRUE) will not work, because R thinks \. is a special character like \n

#Use two \’s
grep('c\\.t', vec2, perl = TRUE)
```

Matching metacharacters
========================================================
class:small-code

To match a \, our pattern must represent \\

Our string must contain 4 backslashes!
```{r}
vec = c("a\\backslash", "nobackslash")
#grep('\\', vec, perl = TRUE) gives error
grep('\\\\', vec, perl = TRUE)
```

Search and replace
========================================================
class:small-code
The **sub** function allows search and replacement:
```{r}
vec2
sub('a+', 'a', vec2, perl = TRUE)
```
**sub** replaces only first match, **gsub** replaces all

Use backreferences \1, \2 etc to refer to first, second group, etc.
```{r}
gsub('(a+)r(a+)', 'b\\1brc\\2c', vec2, perl = TRUE)
```

Search and replace
========================================================
class:small-code
Use \U, \L, \E to make following backreferences upper or lower case or leave unchanged
```{r}
vec2
gsub('(a+)r(a+)', '\\U\\1r\\2', vec2, perl = TRUE)
gsub('(a+)r(a+)', '\\U\\1r\\E\\2', vec2, perl = TRUE)
```







